"use strict";(self.webpackChunkboss_wiki=self.webpackChunkboss_wiki||[]).push([[9777],{3905:(t,e,n)=>{n.d(e,{Zo:()=>d,kt:()=>k});var r=n(7294);function a(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function c(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,r)}return n}function o(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?c(Object(n),!0).forEach((function(e){a(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):c(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function s(t,e){if(null==t)return{};var n,r,a=function(t,e){if(null==t)return{};var n,r,a={},c=Object.keys(t);for(r=0;r<c.length;r++)n=c[r],e.indexOf(n)>=0||(a[n]=t[n]);return a}(t,e);if(Object.getOwnPropertySymbols){var c=Object.getOwnPropertySymbols(t);for(r=0;r<c.length;r++)n=c[r],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(a[n]=t[n])}return a}var i=r.createContext({}),p=function(t){var e=r.useContext(i),n=e;return t&&(n="function"==typeof t?t(e):o(o({},e),t)),n},d=function(t){var e=p(t.components);return r.createElement(i.Provider,{value:e},t.children)},u={inlineCode:"code",wrapper:function(t){var e=t.children;return r.createElement(r.Fragment,{},e)}},l=r.forwardRef((function(t,e){var n=t.components,a=t.mdxType,c=t.originalType,i=t.parentName,d=s(t,["components","mdxType","originalType","parentName"]),l=p(n),k=a,f=l["".concat(i,".").concat(k)]||l[k]||u[k]||c;return n?r.createElement(f,o(o({ref:e},d),{},{components:n})):r.createElement(f,o({ref:e},d))}));function k(t,e){var n=arguments,a=e&&e.mdxType;if("string"==typeof t||a){var c=n.length,o=new Array(c);o[0]=l;var s={};for(var i in e)hasOwnProperty.call(e,i)&&(s[i]=e[i]);s.originalType=t,s.mdxType="string"==typeof t?t:a,o[1]=s;for(var p=2;p<c;p++)o[p]=n[p];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}l.displayName="MDXCreateElement"},2843:(t,e,n)=>{n.r(e),n.d(e,{assets:()=>i,contentTitle:()=>o,default:()=>u,frontMatter:()=>c,metadata:()=>s,toc:()=>p});var r=n(7462),a=(n(7294),n(3905));const c={},o=void 0,s={unversionedId:"tech/c++/c++11 \u591a\u7ebf\u7a0b/packaged_task",id:"tech/c++/c++11 \u591a\u7ebf\u7a0b/packaged_task",title:"packaged_task",description:"https://thispointer.com/c11-multithreading-part-10-packaged_task-example-and-tutorial/",source:"@site/docs/tech/c++/c++11 \u591a\u7ebf\u7a0b/packaged_task.md",sourceDirName:"tech/c++/c++11 \u591a\u7ebf\u7a0b",slug:"/tech/c++/c++11 \u591a\u7ebf\u7a0b/packaged_task",permalink:"/docs/tech/c++/c++11 \u591a\u7ebf\u7a0b/packaged_task",draft:!1,editUrl:"https://github.com/dontnet-wuenze/Wiki_Docusaurus/edit/master/docs/tech/c++/c++11 \u591a\u7ebf\u7a0b/packaged_task.md",tags:[],version:"current",frontMatter:{},sidebar:"techSidebar",previous:{title:"packaged_task \u548c async \u533a\u522b",permalink:"/docs/tech/c++/c++11 \u591a\u7ebf\u7a0b/packaged_task \u548c async \u533a\u522b"},next:{title:"std::async",permalink:"/docs/tech/c++/c++11 \u591a\u7ebf\u7a0b/std::async"}},i={},p=[],d={toc:p};function u(t){let{components:e,...n}=t;return(0,a.kt)("wrapper",(0,r.Z)({},d,n,{components:e,mdxType:"MDXLayout"}),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://thispointer.com/c11-multithreading-part-10-packaged_task-example-and-tutorial/"},"https://thispointer.com/c11-multithreading-part-10-packaged_task-example-and-tutorial/")),(0,a.kt)("p",null,"packaged_tack \u80fd\u591f\u5c01\u88c5\u4e00\u4e2a\u666e\u901a\u7684\u51fd\u6570\u4f7f\u4e4b\u5177\u6709 async \u7684\u7279\u6027\u3002"),(0,a.kt)("p",null,"\u793a\u4f8b:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},'#include <iostream>\n#include <thread>\n#include <future>\n#include <string>\n// Fetch some data from DB\nstd::string getDataFromDB( std::string token)\n{\n    // Do some stuff to fetch the data\n    std::string data = "Data fetched from DB by Filter :: " + token;\n    return data;\n}\nint main()\n{\n    // Create a packaged_task<> that encapsulated the callback i.e. a function\n    std::packaged_task<std::string (std::string)> task(getDataFromDB);\n    // Fetch the associated future<> from packaged_task<>\n    std::future<std::string> result = task.get_future();\n    // Pass the packaged_task to thread to run asynchronously\n    std::thread th(std::move(task), "Arg");\n    // Join the thread. Its blocking and returns when thread is finished.\n    th.join();\n    // Fetch the result of packaged_task<> i.e. value returned by getDataFromDB()\n    std::string data =  result.get();\n    std::cout <<  data << std::endl;\n    return 0;\n}\n')))}u.isMDXComponent=!0}}]);