"use strict";(self.webpackChunkboss_wiki=self.webpackChunkboss_wiki||[]).push([[7148],{3905:(e,t,n)=>{n.d(t,{Zo:()=>s,kt:()=>d});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var o=a.createContext({}),p=function(e){var t=a.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},s=function(e){var t=p(e.components);return a.createElement(o.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,o=e.parentName,s=c(e,["components","mdxType","originalType","parentName"]),m=p(n),d=r,h=m["".concat(o,".").concat(d)]||m[d]||u[d]||i;return n?a.createElement(h,l(l({ref:t},s),{},{components:n})):a.createElement(h,l({ref:t},s))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,l=new Array(i);l[0]=m;var c={};for(var o in t)hasOwnProperty.call(t,o)&&(c[o]=t[o]);c.originalType=e,c.mdxType="string"==typeof e?e:r,l[1]=c;for(var p=2;p<i;p++)l[p]=n[p];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},1254:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>l,default:()=>u,frontMatter:()=>i,metadata:()=>c,toc:()=>p});var a=n(7462),r=(n(7294),n(3905));const i={},l=void 0,c={unversionedId:"tech/c++/lambda \u51fd\u6570",id:"tech/c++/lambda \u51fd\u6570",title:"lambda \u51fd\u6570",description:"https://docs.microsoft.com/en-us/cpp/cpp/lambda-expressions-in-cpp?view=msvc-170",source:"@site/docs/tech/c++/lambda \u51fd\u6570.md",sourceDirName:"tech/c++",slug:"/tech/c++/lambda \u51fd\u6570",permalink:"/docs/tech/c++/lambda \u51fd\u6570",draft:!1,editUrl:"https://github.com/dontnet-wuenze/Wiki_Docusaurus/edit/master/docs/tech/c++/lambda \u51fd\u6570.md",tags:[],version:"current",frontMatter:{},sidebar:"techSidebar",previous:{title:"cin \u4e0e getline \u6df7\u7528",permalink:"/docs/tech/c++/cin \u4e0e getline \u6df7\u7528"},next:{title:"std::ref \u7528\u6cd5",permalink:"/docs/tech/c++/std::ref \u7528\u6cd5"}},o={},p=[{value:"Capture clause",id:"capture-clause",level:3}],s={toc:p};function u(e){let{components:t,...i}=e;return(0,r.kt)("wrapper",(0,a.Z)({},s,i,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/cpp/cpp/lambda-expressions-in-cpp?view=msvc-170"},"https://docs.microsoft.com/en-us/cpp/cpp/lambda-expressions-in-cpp?view=msvc-170")),(0,r.kt)("p",null,"\u793a\u4f8b:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"#include <algorithm>\n#include <cmath>\n\nvoid abssort(float* x, unsigned n) {\n    std::sort(x, x + n,\n        // Lambda expression begins\n        [](float a, float b) {\n            return (std::abs(a) < std::abs(b));\n        } // end of lambda expression\n    );\n}\n")),(0,r.kt)("p",null,"Lambda \u51fd\u6570\u5404\u90e8\u5206\u793a\u4f8b\u56fe"),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"Example banner",src:n(3200).Z,width:"562",height:"380"})),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"capture clause (Also known as the lambda-introducer in the C++ specification.)"),(0,r.kt)("li",{parentName:"ol"},"parameter list Optional. (Also known as the lambda declarator)"),(0,r.kt)("li",{parentName:"ol"},"mutable specification Optional."),(0,r.kt)("li",{parentName:"ol"},"exception-specification Optional."),(0,r.kt)("li",{parentName:"ol"},"trailing-return-type Optional."),(0,r.kt)("li",{parentName:"ol"},"lambda body.")),(0,r.kt)("h3",{id:"capture-clause"},"Capture clause"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"[&total, factor]\n[factor, &total]\n[&, factor]\n[=, &total]\n")),(0,r.kt)("p",null,"\u53ef\u4ee5\u901a\u8fc7\u5728\u5f00\u5934\u8bbe\u7f6e\u9ed8\u8ba4 &(\u5f15\u7528) \u6216\u8005 =(\u8d4b\u503c), \u6ce8\u610f = \u662f\u9ed8\u8ba4\u65f6, \u4e0d\u53ef\u4ee5\u6709 =identifier \u7684\u5f62\u5f0f\u3002"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"this"),"\u7684\u7528\u6cd5\u6bd4\u8f83\u7279\u6b8a"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://www.nextptr.com/tutorial/ta1430524603/capture-this-in-lambda-expression-timeline-of-change"},"https://www.nextptr.com/tutorial/ta1430524603/capture-this-in-lambda-expression-timeline-of-change")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"[this]"," \u2014 Captures ",(0,r.kt)("em",{parentName:"li"},"this by reference or &("),"this)."),(0,r.kt)("li",{parentName:"ul"},"[*this]","\u2014 Captures ",(0,r.kt)("em",{parentName:"li"},"this by value. By-value capture of "),"this is introduced in C++17."),(0,r.kt)("li",{parentName:"ul"},"[this, *this]"," \u2014 Invalid. Cannot have this more than once."),(0,r.kt)("li",{parentName:"ul"},"[&]"," \u2014 The reference-capture-default can implicitly capture this or &(*this)."),(0,r.kt)("li",{parentName:"ul"},"[&, this]"," \u2014 Same as ","[&]",", therefore redundant."),(0,r.kt)("li",{parentName:"ul"},"[&, *this]"," \u2014 Valid since C++17, but unlikely to be used."),(0,r.kt)("li",{parentName:"ul"},"[=]"," \u2014 The value-capture-default can implicitly capture this or &(*this). However, the implicit capture of this through ","[=]"," is deprecated in C++20."),(0,r.kt)("li",{parentName:"ul"},"[=, this]"," \u2014 Valid only since C++20. C++20 deprecates the implicit capture of this via ","[=]"," and allows the explicit capture of this in combination with ","[=]","."),(0,r.kt)("li",{parentName:"ul"},"[=, *this]"," \u2014 Valid since C++17.")),(0,r.kt)("p",null,"\u4f8b\u5b50"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"struct S { void f(int i); };\n\nvoid S::f(int i) {\n    [&, i]{};      // OK\n    [&, &i]{};     // ERROR: i preceded by & when & is the default\n    [=, this]{};   // ERROR: this when = is the default\n    [=, *this]{ }; // OK: captures this by value. See below.\n    [i, i]{};      // ERROR: i repeated\n}\n")))}u.isMDXComponent=!0},3200:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/lambda-1c651caf5de8853f9ced1492d3376b5b.png"}}]);