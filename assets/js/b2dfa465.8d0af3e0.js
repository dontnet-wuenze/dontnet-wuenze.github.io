"use strict";(self.webpackChunkboss_wiki=self.webpackChunkboss_wiki||[]).push([[635],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>k});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function c(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?c(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):c(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},c=Object.keys(e);for(a=0;a<c.length;a++)n=c[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var c=Object.getOwnPropertySymbols(e);for(a=0;a<c.length;a++)n=c[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),p=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},u=function(e){var t=p(e.components);return a.createElement(l.Provider,{value:t},e.children)},i={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,c=e.originalType,l=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),d=p(n),k=r,f=d["".concat(l,".").concat(k)]||d[k]||i[k]||c;return n?a.createElement(f,s(s({ref:t},u),{},{components:n})):a.createElement(f,s({ref:t},u))}));function k(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var c=n.length,s=new Array(c);s[0]=d;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o.mdxType="string"==typeof e?e:r,s[1]=o;for(var p=2;p<c;p++)s[p]=n[p];return a.createElement.apply(null,s)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},9282:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>i,frontMatter:()=>c,metadata:()=>o,toc:()=>p});var a=n(7462),r=(n(7294),n(3905));const c={},s=void 0,o={unversionedId:"tech/c++/c++11 \u591a\u7ebf\u7a0b/packaged_task \u548c async \u533a\u522b",id:"tech/c++/c++11 \u591a\u7ebf\u7a0b/packaged_task \u548c async \u533a\u522b",title:"packaged_task \u548c async \u533a\u522b",description:"https://stackoverflow.com/questions/18143661/what-is-the-difference-between-packaged-task-and-async/18143844#18143844",source:"@site/docs/tech/c++/c++11 \u591a\u7ebf\u7a0b/packaged_task \u548c async \u533a\u522b.md",sourceDirName:"tech/c++/c++11 \u591a\u7ebf\u7a0b",slug:"/tech/c++/c++11 \u591a\u7ebf\u7a0b/packaged_task \u548c async \u533a\u522b",permalink:"/docs/tech/c++/c++11 \u591a\u7ebf\u7a0b/packaged_task \u548c async \u533a\u522b",draft:!1,editUrl:"https://github.com/dontnet-wuenze/Wiki_Docusaurus/edit/master/docs/tech/c++/c++11 \u591a\u7ebf\u7a0b/packaged_task \u548c async \u533a\u522b.md",tags:[],version:"current",frontMatter:{},sidebar:"techSidebar",previous:{title:"c++ \u7ebf\u7a0b\u540c\u6b65",permalink:"/docs/tech/c++/c++11 \u591a\u7ebf\u7a0b/c++ \u7ebf\u7a0b\u540c\u6b65"},next:{title:"packaged_task",permalink:"/docs/tech/c++/c++11 \u591a\u7ebf\u7a0b/packaged_task"}},l={},p=[{value:"packaged_task",id:"packaged_task",level:2},{value:"std::async",id:"stdasync",level:2},{value:"\u7f3a\u70b9",id:"\u7f3a\u70b9",level:3}],u={toc:p};function i(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://stackoverflow.com/questions/18143661/what-is-the-difference-between-packaged-task-and-async/18143844#18143844"},"https://stackoverflow.com/questions/18143661/what-is-the-difference-between-packaged-task-and-async/18143844#18143844")),(0,r.kt)("p",null,"\u5982\u679c\u4e00\u4e2a\u51fd\u6570\u8fd0\u884c\u65f6\u95f4\u5f88\u957f, \u5c31\u80fd\u53d1\u73b0\u533a\u522b, \u4f8b\u5982"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"//! sleeps for one second and returns 1\nauto sleep = [](){\n    std::this_thread::sleep_for(std::chrono::seconds(1));\n    return 1;\n};\n")),(0,r.kt)("h2",{id:"packaged_task"},"packaged_task"),(0,r.kt)("p",null,"\u5bf9\u4e8e\u4e00\u4e2a packaged_task, \u9700\u8981\u624b\u52a8\u8c03\u7528"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},'std::packaged_task<int()> task(sleep);\n\nauto f = task.get_future();\ntask(); // invoke the function\n\n// You have to wait until task returns. Since task calls sleep\n// you will have to wait at least 1 second.\nstd::cout << "You can see this after 1 second\\n";\n\n// However, f.get() will be available, since task has already finished.\nstd::cout << f.get() << std::endl;\n')),(0,r.kt)("h2",{id:"stdasync"},"std::async"),(0,r.kt)("p",null,"\u9996\u5148 async \u4f1a\u5728\u4e00\u4e2a\u5176\u4ed6\u7ebf\u7a0b\u4e2d\u6267\u884c\u51fd\u6570"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},'auto f = std::async(std::launch::async, sleep);\nstd::cout << "You can see this immediately!\\n";\n\n// However, the value of the future will be available after sleep has finished\n// so f.get() can block up to 1 second.\nstd::cout << f.get() << "This will be shown after a second!\\n";\n')),(0,r.kt)("h3",{id:"\u7f3a\u70b9"},"\u7f3a\u70b9"),(0,r.kt)("p",null,"async \u67d0\u4e9b\u65f6\u5019\u4f1a\u963b\u585e\u5728 future \u7684\u6790\u6784\u9636\u6bb5\u3002"),(0,r.kt)("p",null,"\u4e0b\u9762\u8fd9\u4e2a\u4f8b\u5b50\u56e0\u4e3a async \u7684\u8fd4\u56de future \u6ca1\u6709\u88ab\u63a5\u6536, \u6240\u4ee5\u4f1a\u53d1\u751f ~future, \u56e0\u6b64\u4f1a\u963b\u585e"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"std::async(do_work1); // ~future blocks\nstd::async(do_work2); // ~future blocks\n\n/* output: (assuming that do_work* log their progress)\n    do_work1() started;\n    do_work1() stopped;\n    do_work2() started;\n    do_work2() stopped;\n*/\n")),(0,r.kt)("p",null,"\u793a\u4f8b2:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"\u8fd9\u4e2a\u4f8b\u5b50\u5728 return \u7684\u65f6\u5019 pizza \u8981\u88ab\u56de\u6536, \u6b64\u65f6\u6267\u884c ~future, \u53d1\u751f\u963b\u585e\n{\n    auto pizza = std::async(get_pizza);\n    /* ... */\n    if(need_to_go)\n        return;          // ~future will block\n    else\n       eat(pizza.get());\n}  \n")),(0,r.kt)("p",null,"\u603b\u7684\u6765\u8bf4, \u4f7f\u7528 packaged_task \u66f4\u7075\u6d3b, \u662f\u4e00\u4e2a\u66f4\u57fa\u7840\u7684\u7279\u6027\u3002"))}i.isMDXComponent=!0}}]);