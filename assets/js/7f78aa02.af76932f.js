"use strict";(self.webpackChunkboss_wiki=self.webpackChunkboss_wiki||[]).push([[4477],{3905:(n,e,t)=>{t.d(e,{Zo:()=>l,kt:()=>d});var i=t(7294);function r(n,e,t){return e in n?Object.defineProperty(n,e,{value:t,enumerable:!0,configurable:!0,writable:!0}):n[e]=t,n}function o(n,e){var t=Object.keys(n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(n);e&&(i=i.filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),t.push.apply(t,i)}return t}function s(n){for(var e=1;e<arguments.length;e++){var t=null!=arguments[e]?arguments[e]:{};e%2?o(Object(t),!0).forEach((function(e){r(n,e,t[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(e){Object.defineProperty(n,e,Object.getOwnPropertyDescriptor(t,e))}))}return n}function c(n,e){if(null==n)return{};var t,i,r=function(n,e){if(null==n)return{};var t,i,r={},o=Object.keys(n);for(i=0;i<o.length;i++)t=o[i],e.indexOf(t)>=0||(r[t]=n[t]);return r}(n,e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(n);for(i=0;i<o.length;i++)t=o[i],e.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(n,t)&&(r[t]=n[t])}return r}var a=i.createContext({}),u=function(n){var e=i.useContext(a),t=e;return n&&(t="function"==typeof n?n(e):s(s({},e),n)),t},l=function(n){var e=u(n.components);return i.createElement(a.Provider,{value:e},n.children)},p={inlineCode:"code",wrapper:function(n){var e=n.children;return i.createElement(i.Fragment,{},e)}},m=i.forwardRef((function(n,e){var t=n.components,r=n.mdxType,o=n.originalType,a=n.parentName,l=c(n,["components","mdxType","originalType","parentName"]),m=u(t),d=r,f=m["".concat(a,".").concat(d)]||m[d]||p[d]||o;return t?i.createElement(f,s(s({ref:e},l),{},{components:t})):i.createElement(f,s({ref:e},l))}));function d(n,e){var t=arguments,r=e&&e.mdxType;if("string"==typeof n||r){var o=t.length,s=new Array(o);s[0]=m;var c={};for(var a in e)hasOwnProperty.call(e,a)&&(c[a]=e[a]);c.originalType=n,c.mdxType="string"==typeof n?n:r,s[1]=c;for(var u=2;u<o;u++)s[u]=t[u];return i.createElement.apply(null,s)}return i.createElement.apply(null,t)}m.displayName="MDXCreateElement"},8500:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>a,contentTitle:()=>s,default:()=>p,frontMatter:()=>o,metadata:()=>c,toc:()=>u});var i=t(7462),r=(t(7294),t(3905));const o={},s=void 0,c={unversionedId:"tech/c++/union \u7528\u6cd5",id:"tech/c++/union \u7528\u6cd5",title:"union \u7528\u6cd5",description:"https://en.cppreference.com/w/cpp/language/union",source:"@site/docs/tech/c++/union \u7528\u6cd5.md",sourceDirName:"tech/c++",slug:"/tech/c++/union \u7528\u6cd5",permalink:"/docs/tech/c++/union \u7528\u6cd5",draft:!1,editUrl:"https://github.com/dontnet-wuenze/Wiki_Docusaurus/edit/master/docs/tech/c++/union \u7528\u6cd5.md",tags:[],version:"current",frontMatter:{},sidebar:"techSidebar",previous:{title:"string append() \u548c += \u533a\u522b",permalink:"/docs/tech/c++/string append() \u548c += \u533a\u522b"},next:{title:"\u62f7\u8d1d\u6784\u9020\u51fd\u6570\u4e0e\u8d4b\u503c\u51fd\u6570\u533a\u522b",permalink:"/docs/tech/c++/\u62f7\u8d1d\u6784\u9020\u51fd\u6570\u4e0e\u8d4b\u503c\u51fd\u6570\u533a\u522b"}},a={},u=[{value:"\u7528\u6cd5",id:"\u7528\u6cd5",level:2},{value:"Lifetime",id:"lifetime",level:2},{value:"Anonymous unions",id:"anonymous-unions",level:2},{value:"Union-like classes",id:"union-like-classes",level:2}],l={toc:u};function p(n){let{components:e,...t}=n;return(0,r.kt)("wrapper",(0,i.Z)({},l,t,{components:e,mdxType:"MDXLayout"}),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://en.cppreference.com/w/cpp/language/union"},"https://en.cppreference.com/w/cpp/language/union")),(0,r.kt)("p",null,"Union \u7684\u4e3b\u8981\u76ee\u7684\u5e94\u8be5\u662f\u8282\u7701\u7a7a\u95f4\n\u4e00\u4e2a Union \u4e2d\u7684\u53d8\u91cf\u5171\u7528\u4e00\u5757\u7a7a\u95f4"),(0,r.kt)("h2",{id:"\u7528\u6cd5"},"\u7528\u6cd5"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"#include <iostream>\n#include <cstdint>\nunion S\n{\n    std::int32_t n;     // occupies 4 bytes\n    std::uint16_t s[2]; // occupies 4 bytes\n    std::uint8_t c;     // occupies 1 byte\n};                      // the whole union occupies 4 bytes\n \nint main()\n{\n    S s = {0x12345678}; // initializes the first member, s.n is now the active member\n    // at this point, reading from s.s or s.c is undefined behavior\n    std::cout << std::hex << \"s.n = \" << s.n << '\\n';\n    s.s[0] = 0x0011; // s.s is now the active member\n    // at this point, reading from n or c is UB but most compilers define it\n    std::cout << \"s.c is now \" << +s.c << '\\n' // 11 or 00, depending on platform\n              << \"s.n is now \" << s.n << '\\n'; // 12340011 or 00115678\n}\n")),(0,r.kt)("h2",{id:"lifetime"},"Lifetime"),(0,r.kt)("p",null,"\u5f53\u4e00\u4e2a Union \u53d8\u91cf\u88ab\u8d4b\u503c\u7684\u65f6\u5019\u8fd9\u4e2a\u53d8\u91cf\u5c31\u662f active member, \u4e5f\u5c31\u662f\u8bf4, \u8bfb\u53d6\u5176\u4ed6 member \u7684\u503c\u662f\u672a\u5b9a\u4e49\u7684\u884c\u4e3a\u3002\n\u5982\u679c Union \u4e2d\u7684\u5176\u4ed6\u53d8\u91cf\u88ab active \u4e86, \u4e4b\u524d\u7684\u53d8\u91cf\u4e5f\u5c31\u7ed3\u675f\u4e86\u3002"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},'union A { int x; int y[4]; };\nstruct B { A a; };\nunion C { B b; int k; };\nint f() {\n  C c;               // does not start lifetime of any union member\n  c.b.a.y[3] = 4;    // OK: "c.b.a.y[3]", names union members c.b and c.b.a.y;\n                     // This creates objects to hold union members c.b and c.b.a.y\n  return c.b.a.y[3]; // OK: c.b.a.y refers to newly created object\n}\n \nstruct X { const int a; int b; };\nunion Y { X x; int k; };\nvoid g() {\n  Y y = { { 1, 2 } }; // OK, y.x is active union member\n  int n = y.x.a;\n  y.k = 4;   // OK: ends lifetime of y.x, y.k is active member of union\n  y.x.b = n; // undefined behavior: y.x.b modified outside its lifetime,\n             // "y.x.b" names y.x, but X\'s default constructor is deleted,\n             // so union member y.x\'s lifetime does not implicitly start\n}\n')),(0,r.kt)("h2",{id:"anonymous-unions"},"Anonymous unions"),(0,r.kt)("p",null,"\u8fd9\u662f\u4e00\u79cd\u7279\u6b8a\u7684\u7528\u6cd5, \u4e0d\u6307\u5b9a Union \u7684\u540d\u5b57, \u6240\u4ee5\u53ef\u4ee5\u76f4\u63a5\u7528 Union \u4e2d\u7684\u53d8\u91cf"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},'int main()\n{\n    union\n    {\n        int a;\n        const char* p;\n    };\n    a = 1;\n    p = "Jennifer";\n}\n')),(0,r.kt)("h2",{id:"union-like-classes"},"Union-like classes"),(0,r.kt)("p",null,"\u914d\u5408\u4e0a\u9762\u7684 Anonymous union \u6765\u4f7f\u7528"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"#include <iostream>\n \n// S has one non-static data member (tag), three enumerator members (CHAR, INT, DOUBLE), \n// and three variant members (c, i, d)\nstruct S\n{\n    enum{CHAR, INT, DOUBLE} tag;\n    union\n    {\n        char c;\n        int i;\n        double d;\n    };\n};\n \nvoid print_s(const S& s)\n{\n    switch(s.tag)\n    {\n        case S::CHAR: std::cout << s.c << '\\n'; break;\n        case S::INT: std::cout << s.i << '\\n'; break;\n        case S::DOUBLE: std::cout << s.d << '\\n'; break;\n    }\n}\n \nint main()\n{\n    S s = {S::CHAR, 'a'};\n    print_s(s);\n    s.tag = S::INT;\n    s.i = 123;\n    print_s(s);\n}\n")))}p.isMDXComponent=!0}}]);