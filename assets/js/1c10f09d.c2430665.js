"use strict";(self.webpackChunkboss_wiki=self.webpackChunkboss_wiki||[]).push([[8075],{3905:(t,e,n)=>{n.d(e,{Zo:()=>d,kt:()=>f});var a=n(7294);function r(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function c(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(t);e&&(a=a.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,a)}return n}function s(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?c(Object(n),!0).forEach((function(e){r(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):c(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function i(t,e){if(null==t)return{};var n,a,r=function(t,e){if(null==t)return{};var n,a,r={},c=Object.keys(t);for(a=0;a<c.length;a++)n=c[a],e.indexOf(n)>=0||(r[n]=t[n]);return r}(t,e);if(Object.getOwnPropertySymbols){var c=Object.getOwnPropertySymbols(t);for(a=0;a<c.length;a++)n=c[a],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(r[n]=t[n])}return r}var o=a.createContext({}),l=function(t){var e=a.useContext(o),n=e;return t&&(n="function"==typeof t?t(e):s(s({},e),t)),n},d=function(t){var e=l(t.components);return a.createElement(o.Provider,{value:e},t.children)},u={inlineCode:"code",wrapper:function(t){var e=t.children;return a.createElement(a.Fragment,{},e)}},p=a.forwardRef((function(t,e){var n=t.components,r=t.mdxType,c=t.originalType,o=t.parentName,d=i(t,["components","mdxType","originalType","parentName"]),p=l(n),f=r,m=p["".concat(o,".").concat(f)]||p[f]||u[f]||c;return n?a.createElement(m,s(s({ref:e},d),{},{components:n})):a.createElement(m,s({ref:e},d))}));function f(t,e){var n=arguments,r=e&&e.mdxType;if("string"==typeof t||r){var c=n.length,s=new Array(c);s[0]=p;var i={};for(var o in e)hasOwnProperty.call(e,o)&&(i[o]=e[o]);i.originalType=t,i.mdxType="string"==typeof t?t:r,s[1]=i;for(var l=2;l<c;l++)s[l]=n[l];return a.createElement.apply(null,s)}return a.createElement.apply(null,n)}p.displayName="MDXCreateElement"},6061:(t,e,n)=>{n.r(e),n.d(e,{assets:()=>o,contentTitle:()=>s,default:()=>u,frontMatter:()=>c,metadata:()=>i,toc:()=>l});var a=n(7462),r=(n(7294),n(3905));const c={},s=void 0,i={unversionedId:"tech/c++/c++11 \u591a\u7ebf\u7a0b/std::async",id:"tech/c++/c++11 \u591a\u7ebf\u7a0b/std::async",title:"std::async",description:"https://thispointer.com/c11-multithreading-part-9-stdasync-tutorial-example/",source:"@site/docs/tech/c++/c++11 \u591a\u7ebf\u7a0b/std::async.md",sourceDirName:"tech/c++/c++11 \u591a\u7ebf\u7a0b",slug:"/tech/c++/c++11 \u591a\u7ebf\u7a0b/std::async",permalink:"/docs/tech/c++/c++11 \u591a\u7ebf\u7a0b/std::async",draft:!1,editUrl:"https://github.com/dontnet-wuenze/Wiki_Docusaurus/edit/master/docs/tech/c++/c++11 \u591a\u7ebf\u7a0b/std::async.md",tags:[],version:"current",frontMatter:{},sidebar:"techSidebar",previous:{title:"packaged_task",permalink:"/docs/tech/c++/c++11 \u591a\u7ebf\u7a0b/packaged_task"},next:{title:"std::promise",permalink:"/docs/tech/c++/c++11 \u591a\u7ebf\u7a0b/std::promise"}},o={},l=[{value:"Calling std::async with function pointer as callback",id:"calling-stdasync-with-function-pointer-as-callback",level:3},{value:"Calling std::async with Function Object as callback",id:"calling-stdasync-with-function-object-as-callback",level:3},{value:"Calling std::async with Lambda function as callback",id:"calling-stdasync-with-lambda-function-as-callback",level:3}],d={toc:l};function u(t){let{components:e,...n}=t;return(0,r.kt)("wrapper",(0,a.Z)({},d,n,{components:e,mdxType:"MDXLayout"}),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://thispointer.com/c11-multithreading-part-9-stdasync-tutorial-example/"},"https://thispointer.com/c11-multithreading-part-9-stdasync-tutorial-example/")),(0,r.kt)("p",null,"async \u51fd\u6570\u7684\u8fd4\u56de\u503c\u662f\u4e00\u4e2a future, \u56e0\u6b64\u53ef\u4ee5\u963b\u585e\u7ebf\u7a0b\u7b49\u5f85\u51fd\u6570\u8fd4\u56de\u3002"),(0,r.kt)("h3",{id:"calling-stdasync-with-function-pointer-as-callback"},"Calling std::async with function pointer as callback"),(0,r.kt)("p",null,"async() \u4f1a\u6709\u5982\u4e0b\u7684\u8fc7\u7a0b:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"It automatically creates a thread (Or picks from internal thread pool) and a promise object for us."),(0,r.kt)("li",{parentName:"ul"},"Then passes the std::promise object to thread function and returns the associated std::future object."),(0,r.kt)("li",{parentName:"ul"},"When our passed argument function exits then its value will be set in this promise object, so eventually return value will be available in std::future object.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},'#include <iostream>\n#include <string>\n#include <chrono>\n#include <thread>\n#include <future>\nusing namespace std::chrono;\nstd::string fetchDataFromDB(std::string recvdData)\n{\n    // Make sure that function takes 5 seconds to complete\n    std::this_thread::sleep_for(seconds(5));\n    //Do stuff like creating DB Connection and fetching Data\n    return "DB_" + recvdData;\n}\nstd::string fetchDataFromFile(std::string recvdData)\n{\n    // Make sure that function takes 5 seconds to complete\n    std::this_thread::sleep_for(seconds(5));\n    //Do stuff like fetching Data File\n    return "File_" + recvdData;\n}\nint main()\n{\n    // Get Start Time\n    system_clock::time_point start = system_clock::now();\n    std::future<std::string> resultFromDB = std::async(std::launch::async, fetchDataFromDB, "Data");\n    //Fetch Data from File\n    std::string fileData = fetchDataFromFile("Data");\n    //Fetch Data from DB\n    // Will block till data is available in future<std::string> object.\n    std::string dbData = resultFromDB.get();\n    // Get End Time\n    auto end = system_clock::now();\n    auto diff = duration_cast < std::chrono::seconds > (end - start).count();\n    std::cout << "Total Time Taken = " << diff << " Seconds" << std::endl;\n    //Combine The Data\n    std::string data = dbData + " :: " + fileData;\n    //Printing the combined Data\n    std::cout << "Data = " << data << std::endl;\n    return 0;\n}\n')),(0,r.kt)("h3",{id:"calling-stdasync-with-function-object-as-callback"},"Calling std::async with Function Object as callback"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},'/*\n * Function Object\n */\nstruct DataFetcher\n{\n    std::string operator()(std::string recvdData)\n    {\n        // Make sure that function takes 5 seconds to complete\n        std::this_thread::sleep_for (seconds(5));\n        //Do stuff like fetching Data File\n        return "File_" + recvdData;\n    }\n};\n//Calling std::async with function object\nstd::future<std::string> fileResult = std::async(DataFetcher(), "Data");\n')),(0,r.kt)("h3",{id:"calling-stdasync-with-lambda-function-as-callback"},"Calling std::async with Lambda function as callback"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},'//Calling std::async with lambda function\nstd::future<std::string> resultFromDB = std::async([](std::string recvdData){\n                        std::this_thread::sleep_for (seconds(5));\n                        //Do stuff like creating DB Connection and fetching Data\n                        return "DB_" + recvdData;\n                    }, "Data");\n')))}u.isMDXComponent=!0}}]);