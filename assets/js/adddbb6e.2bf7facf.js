"use strict";(self.webpackChunkboss_wiki=self.webpackChunkboss_wiki||[]).push([[7444],{3905:(n,e,t)=>{t.d(e,{Zo:()=>u,kt:()=>f});var r=t(7294);function c(n,e,t){return e in n?Object.defineProperty(n,e,{value:t,enumerable:!0,configurable:!0,writable:!0}):n[e]=t,n}function o(n,e){var t=Object.keys(n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(n);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),t.push.apply(t,r)}return t}function i(n){for(var e=1;e<arguments.length;e++){var t=null!=arguments[e]?arguments[e]:{};e%2?o(Object(t),!0).forEach((function(e){c(n,e,t[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(e){Object.defineProperty(n,e,Object.getOwnPropertyDescriptor(t,e))}))}return n}function a(n,e){if(null==n)return{};var t,r,c=function(n,e){if(null==n)return{};var t,r,c={},o=Object.keys(n);for(r=0;r<o.length;r++)t=o[r],e.indexOf(t)>=0||(c[t]=n[t]);return c}(n,e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(n);for(r=0;r<o.length;r++)t=o[r],e.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(n,t)&&(c[t]=n[t])}return c}var s=r.createContext({}),p=function(n){var e=r.useContext(s),t=e;return n&&(t="function"==typeof n?n(e):i(i({},e),n)),t},u=function(n){var e=p(n.components);return r.createElement(s.Provider,{value:e},n.children)},l={inlineCode:"code",wrapper:function(n){var e=n.children;return r.createElement(r.Fragment,{},e)}},d=r.forwardRef((function(n,e){var t=n.components,c=n.mdxType,o=n.originalType,s=n.parentName,u=a(n,["components","mdxType","originalType","parentName"]),d=p(t),f=c,m=d["".concat(s,".").concat(f)]||d[f]||l[f]||o;return t?r.createElement(m,i(i({ref:e},u),{},{components:t})):r.createElement(m,i({ref:e},u))}));function f(n,e){var t=arguments,c=e&&e.mdxType;if("string"==typeof n||c){var o=t.length,i=new Array(o);i[0]=d;var a={};for(var s in e)hasOwnProperty.call(e,s)&&(a[s]=e[s]);a.originalType=n,a.mdxType="string"==typeof n?n:c,i[1]=a;for(var p=2;p<o;p++)i[p]=t[p];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},7582:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>s,contentTitle:()=>i,default:()=>l,frontMatter:()=>o,metadata:()=>a,toc:()=>p});var r=t(7462),c=(t(7294),t(3905));const o={},i=void 0,a={unversionedId:"tech/c++/std::ref \u7528\u6cd5",id:"tech/c++/std::ref \u7528\u6cd5",title:"std::ref \u7528\u6cd5",description:"https://murphypei.github.io/blog/2019/04/cpp-std-ref",source:"@site/docs/tech/c++/std::ref \u7528\u6cd5.md",sourceDirName:"tech/c++",slug:"/tech/c++/std::ref \u7528\u6cd5",permalink:"/docs/tech/c++/std::ref \u7528\u6cd5",draft:!1,editUrl:"https://github.com/dontnet-wuenze/Wiki_Docusaurus/edit/master/docs/tech/c++/std::ref \u7528\u6cd5.md",tags:[],version:"current",frontMatter:{},sidebar:"techSidebar",previous:{title:"lambda \u51fd\u6570",permalink:"/docs/tech/c++/lambda \u51fd\u6570"},next:{title:"string append() \u548c += \u533a\u522b",permalink:"/docs/tech/c++/string append() \u548c += \u533a\u522b"}},s={},p=[],u={toc:p};function l(n){let{components:e,...t}=n;return(0,c.kt)("wrapper",(0,r.Z)({},u,t,{components:e,mdxType:"MDXLayout"}),(0,c.kt)("p",null,(0,c.kt)("a",{parentName:"p",href:"https://murphypei.github.io/blog/2019/04/cpp-std-ref"},"https://murphypei.github.io/blog/2019/04/cpp-std-ref")),(0,c.kt)("p",null,"std::ref \u7528\u6765\u53d6\u67d0\u4e2a\u53d8\u91cf\u7684\u5f15\u7528, \u8fd9\u662f\u56e0\u4e3a\u67d0\u4e9bc++\u7684\u65b9\u6cd5\u4f20\u53c2\u9ed8\u8ba4\u662f\u62f7\u8d1d, \u6240\u4ee5\u9700\u8981 std::ref \u6765\u83b7\u53d6\u5f15\u7528"),(0,c.kt)("p",null,"std::bind \u5c31\u662f\u5bf9\u53c2\u6570\u8fdb\u884c\u62f7\u8d1d"),(0,c.kt)("p",null,"\u793a\u4f8b1:"),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-cpp"},"#include <functional>\n#include <iostream>\n\nvoid f(int& n1, int& n2, const int& n3)\n{\n    std::cout << \"In function: \" << n1 << ' ' << n2 << ' ' << n3 << '\\n';\n    ++n1; // increments the copy of n1 stored in the function object\n    ++n2; // increments the main()'s n2\n    // ++n3; // compile error\n}\n\nint main()\n{\n    int n1 = 1, n2 = 2, n3 = 3;\n    std::function<void()> bound_f = std::bind(f, n1, std::ref(n2), std::cref(n3));\n    n1 = 10;\n    n2 = 11;\n    n3 = 12;\n    std::cout << \"Before function: \" << n1 << ' ' << n2 << ' ' << n3 << '\\n';\n    bound_f();\n    std::cout << \"After function: \" << n1 << ' ' << n2 << ' ' << n3 << '\\n';\n}\n")),(0,c.kt)("p",null,"\u8f93\u51fa"),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre"},"Before function: 10 11 12\nIn function: 1 11 12\nAfter function: 10 12 12\n")),(0,c.kt)("p",null,"std::thread \u4e5f\u540c\u6837\u662f\u5bf9\u53c2\u6570\u8fdb\u884c\u62f7\u8d1d"),(0,c.kt)("p",null,"\u793a\u4f8b2:"),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-cpp"},'#include<thread>\n#include<iostream>\n#include<string>\n\nvoid threadFunc(std::string &str, int a)\n{\n    str = "change by threadFunc";\n    a = 13;\n}\n\nint main()\n{\n    std::string str("main");\n    int a = 9;\n    std::thread th(threadFunc, std::ref(str), a);\n\n    th.join();\n\n    std::cout<<"str = " << str << std::endl;\n    std::cout<<"a = " << a << std::endl;\n\n    return 0;\n}\n')),(0,c.kt)("p",null,"\u8f93\u51fa"),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre"},"str = change by threadFunc\na = 9\n")))}l.isMDXComponent=!0}}]);