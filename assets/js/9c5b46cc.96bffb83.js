"use strict";(self.webpackChunkboss_wiki=self.webpackChunkboss_wiki||[]).push([[6443],{3905:(e,t,n)=>{n.d(t,{Zo:()=>s,kt:()=>f});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=r.createContext({}),p=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):c(c({},t),e)),n},s=function(e){var t=p(e.components);return r.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,l=e.parentName,s=i(e,["components","mdxType","originalType","parentName"]),m=p(n),f=o,d=m["".concat(l,".").concat(f)]||m[f]||u[f]||a;return n?r.createElement(d,c(c({ref:t},s),{},{components:n})):r.createElement(d,c({ref:t},s))}));function f(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,c=new Array(a);c[0]=m;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i.mdxType="string"==typeof e?e:o,c[1]=i;for(var p=2;p<a;p++)c[p]=n[p];return r.createElement.apply(null,c)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},3017:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>c,default:()=>u,frontMatter:()=>a,metadata:()=>i,toc:()=>p});var r=n(7462),o=(n(7294),n(3905));const a={},c=void 0,i={unversionedId:"tech/c++/\u7701\u7565\u53f7\u548c\u53ef\u53d8\u53c2\u6570\u6a21\u677f",id:"tech/c++/\u7701\u7565\u53f7\u548c\u53ef\u53d8\u53c2\u6570\u6a21\u677f",title:"\u7701\u7565\u53f7\u548c\u53ef\u53d8\u53c2\u6570\u6a21\u677f",description:"\u9996\u5148\u5b9e\u73b0\u4e00\u4e2a\u6ca1\u6709\u7701\u7565\u53f7\u7684\u57fa\u7c7b\u51fd\u6570",source:"@site/docs/tech/c++/\u7701\u7565\u53f7\u548c\u53ef\u53d8\u53c2\u6570\u6a21\u677f.md",sourceDirName:"tech/c++",slug:"/tech/c++/\u7701\u7565\u53f7\u548c\u53ef\u53d8\u53c2\u6570\u6a21\u677f",permalink:"/docs/tech/c++/\u7701\u7565\u53f7\u548c\u53ef\u53d8\u53c2\u6570\u6a21\u677f",draft:!1,editUrl:"https://github.com/dontnet-wuenze/Wiki_Docusaurus/edit/master/docs/tech/c++/\u7701\u7565\u53f7\u548c\u53ef\u53d8\u53c2\u6570\u6a21\u677f.md",tags:[],version:"current",frontMatter:{},sidebar:"techSidebar",previous:{title:"\u62f7\u8d1d\u6784\u9020\u51fd\u6570\u4e0e\u8d4b\u503c\u51fd\u6570\u533a\u522b",permalink:"/docs/tech/c++/\u62f7\u8d1d\u6784\u9020\u51fd\u6570\u4e0e\u8d4b\u503c\u51fd\u6570\u533a\u522b"}},l={},p=[],s={toc:p};function u(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,r.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"\u9996\u5148\u5b9e\u73b0\u4e00\u4e2a\u6ca1\u6709\u7701\u7565\u53f7\u7684\u57fa\u7c7b\u51fd\u6570\n\u7136\u540e\u4f7f\u7528\u9012\u5f52\u5904\u7406\u7701\u7565\u53f7\u91cc\u7684\u53c2\u6570"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"// The base case: we just have a single number.\ntemplate <typename T>\ndouble sum(T t) {\n  return t;\n}\n\n// The recursive case: we take a number, alongside\n// some other numbers, and produce their sum.\ntemplate <typename T, typename... Rest>\ndouble sum(T t, Rest... rest) {\n  return t + sum(rest...);\n}\n")),(0,o.kt)("p",null,"\u53ef\u4ee5\u7528\u8fd9\u4e2a\u7279\u6027\u5b9e\u73b0\u4e00\u4e2a c++ printf"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"#include <iostream>\n\nvoid tprintf(const char* format) {\n    std::cout << format;\n}\n\ntemplate<typename T, typename... Targs>\nvoid tprintf(const char* format, T value, Targs... Fargs) {\n    for(; *format != '\\0'; format++) {\n        if(*format == '%') {\n            std::cout << value;\n            tprintf(format + 1, Fargs...);\n            return;\n        }\n        std::cout << *format;\n    }\n}\n\nint main() {\n    tprintf(\"% world% %\\n\", \"Hello\", '!', 123);\n}\n")),(0,o.kt)("p",null,"\u8f93\u51fa:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"Hello world! 123\n")))}u.isMDXComponent=!0}}]);