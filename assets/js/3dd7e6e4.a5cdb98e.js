"use strict";(self.webpackChunkboss_wiki=self.webpackChunkboss_wiki||[]).push([[4749],{3905:(e,t,r)=>{r.d(t,{Zo:()=>l,kt:()=>m});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var u=n.createContext({}),c=function(e){var t=n.useContext(u),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},l=function(e){var t=c(e.components);return n.createElement(u.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},p=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,i=e.originalType,u=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),p=c(r),m=a,f=p["".concat(u,".").concat(m)]||p[m]||d[m]||i;return r?n.createElement(f,o(o({ref:t},l),{},{components:r})):n.createElement(f,o({ref:t},l))}));function m(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=r.length,o=new Array(i);o[0]=p;var s={};for(var u in t)hasOwnProperty.call(t,u)&&(s[u]=t[u]);s.originalType=e,s.mdxType="string"==typeof e?e:a,o[1]=s;for(var c=2;c<i;c++)o[c]=r[c];return n.createElement.apply(null,o)}return n.createElement.apply(null,r)}p.displayName="MDXCreateElement"},3627:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>u,contentTitle:()=>o,default:()=>d,frontMatter:()=>i,metadata:()=>s,toc:()=>c});var n=r(7462),a=(r(7294),r(3905));const i={},o=void 0,s={unversionedId:"tech/c++/c++11 \u591a\u7ebf\u7a0b/std::promise",id:"tech/c++/c++11 \u591a\u7ebf\u7a0b/std::promise",title:"std::promise",description:"promise \u901a\u5e38\u662f\u548c future \u642d\u914d\u4f7f\u7528",source:"@site/docs/tech/c++/c++11 \u591a\u7ebf\u7a0b/std::promise.md",sourceDirName:"tech/c++/c++11 \u591a\u7ebf\u7a0b",slug:"/tech/c++/c++11 \u591a\u7ebf\u7a0b/std::promise",permalink:"/docs/tech/c++/c++11 \u591a\u7ebf\u7a0b/std::promise",draft:!1,editUrl:"https://github.com/dontnet-wuenze/Wiki_Docusaurus/edit/master/docs/tech/c++/c++11 \u591a\u7ebf\u7a0b/std::promise.md",tags:[],version:"current",frontMatter:{},sidebar:"techSidebar",previous:{title:"std::async",permalink:"/docs/tech/c++/c++11 \u591a\u7ebf\u7a0b/std::async"},next:{title:"cin \u4e0e getline \u6df7\u7528",permalink:"/docs/tech/c++/cin \u4e0e getline \u6df7\u7528"}},u={},c=[],l={toc:c};function d(e){let{components:t,...r}=e;return(0,a.kt)("wrapper",(0,n.Z)({},l,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"promise \u901a\u5e38\u662f\u548c future \u642d\u914d\u4f7f\u7528"),(0,a.kt)("p",null,"\u57fa\u672c\u6b65\u9aa4\u5982\u4e0b:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"The calling thread makes a promise.\nThe calling thread obtains a future from the promise."),(0,a.kt)("li",{parentName:"ul"},"The promise, along with function arguments, are moved into a separate thread."),(0,a.kt)("li",{parentName:"ul"},"The new thread executes the function and fulfills the promise."),(0,a.kt)("li",{parentName:"ul"},"The original thread retrieves the result.")),(0,a.kt)("p",null,"\u7b80\u5355\u6765\u8bf4, future \u548c\u4e00\u4e2a promise \u7ed1\u5b9a\u540e, furture.get() \u4f1a\u53d1\u751f\u963b\u585e, \u76f4\u5230 promise.setvalue() \u540e\u4f1a\u901a\u77e5\u3002"),(0,a.kt)("p",null,"\u8be6\u7ec6\u89e3\u91ca\u5982\u4e0b:"),(0,a.kt)("p",null,"Each promise is associated with a shared state, which contains some state information and a result which may be not yet evaluated, evaluated to a value (possibly void) or evaluated to an exception. A promise may do three things with the shared state:\nmake ready: the promise stores the result or the exception in the shared state. Marks the state ready and unblocks any thread waiting on a future associated with the shared state."),(0,a.kt)("p",null,"\u793a\u4f8b:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"#include <vector>\n#include <thread>\n#include <future>\n#include <numeric>\n#include <iostream>\n#include <chrono>\n \nvoid accumulate(std::vector<int>::iterator first,\n                std::vector<int>::iterator last,\n                std::promise<int> accumulate_promise)\n{\n    int sum = std::accumulate(first, last, 0);\n    accumulate_promise.set_value(sum);  // Notify future\n}\n \nvoid do_work(std::promise<void> barrier)\n{\n    std::this_thread::sleep_for(std::chrono::seconds(1));\n    barrier.set_value();\n}\n \nint main()\n{\n    // Demonstrate using promise<int> to transmit a result between threads.\n    std::vector<int> numbers = { 1, 2, 3, 4, 5, 6 };\n    std::promise<int> accumulate_promise;\n    std::future<int> accumulate_future = accumulate_promise.get_future();\n    std::thread work_thread(accumulate, numbers.begin(), numbers.end(),\n                            std::move(accumulate_promise));\n \n    // future::get() will wait until the future has a valid result and retrieves it.\n    // Calling wait() before get() is not needed\n    //accumulate_future.wait();  // wait for result\n    std::cout << \"result=\" << accumulate_future.get() << '\\n';\n    work_thread.join();  // wait for thread completion\n \n    // Demonstrate using promise<void> to signal state between threads.\n    std::promise<void> barrier;\n    std::future<void> barrier_future = barrier.get_future();\n    std::thread new_work_thread(do_work, std::move(barrier));\n    barrier_future.wait();\n    new_work_thread.join();\n}\n")))}d.isMDXComponent=!0}}]);